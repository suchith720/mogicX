# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_ngame-for-msmarco-inference.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/00_ngame-for-msmarco-inference.ipynb 3
import os
os.environ['HIP_VISIBLE_DEVICES'] = '0,1'

import torch,json, torch.multiprocessing as mp, joblib, numpy as np, scipy.sparse as sp, argparse, torch.nn.functional as F

from xcai.basics import *
from xcai.models.PPP0XX import DBT009


from typing import Optional
from transformers.activations import get_activation

from fastcore.meta import *
from fastcore.utils import *

from xcai.models.PPP0XX import DBT009Encoder, Pooling

# %% ../nbs/00_ngame-for-msmarco-inference.ipynb 5
os.environ['WANDB_PROJECT'] = 'mogicX_00-msmarco-linker-01'

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--build_block', action='store_true')
    parser.add_argument('--use_pretrained', action='store_true')
    
    parser.add_argument('--do_train_inference', action='store_true')
    parser.add_argument('--do_test_inference', action='store_true')
    
    parser.add_argument('--save_train_prediction', action='store_true')
    parser.add_argument('--save_test_prediction', action='store_true')
    parser.add_argument('--save_label_prediction', action='store_true')
    
    parser.add_argument('--save_representation', action='store_true')
    
    parser.add_argument('--use_sxc_sampler', action='store_true')
    parser.add_argument('--use_nxc_sampler', action='store_true')
    parser.add_argument('--only_test', action='store_true')
    parser.add_argument('--use_oracle', action='store_true')

    parser.add_argument('--pickle_dir', type=str, required=True)
    
    parser.add_argument('--prediction_suffix', type=str, default='')

    parser.add_argument('--exact', action='store_true')
    parser.add_argument('--dataset', type=str)

    parser.add_argument('--normalize', action='store_true')
    parser.add_argument('--use_ln', action='store_true')
    parser.add_argument('--activation', action='store_true')
    
    return parser.parse_args()

# %% ../nbs/00_ngame-for-msmarco-inference.ipynb 20
if __name__ == '__main__':
    output_dir = '/home/aiscuser/scratch1/outputs/mogicX/43_msmarco-conflated-gpt-entity-linker-001'

    input_args = parse_args()

    config_file = '/data/datasets/msmarco/XC/configs/data_gpt-conflated-entity.json'
    config_key = 'data_gpt-conflated-entity'

    mname = 'distilbert-base-uncased'

    pkl_file = get_pkl_file(input_args.pickle_dir, 'msmarco_data-gpt-conflated-entity_distilbert-base-uncased', 
            input_args.use_sxc_sampler, input_args.exact, input_args.only_test)

    do_inference = input_args.do_train_inference or input_args.do_test_inference or input_args.save_train_prediction or input_args.save_test_prediction or input_args.save_representation

    os.makedirs(os.path.dirname(pkl_file), exist_ok=True)
    block = build_block(pkl_file, config_file, input_args.use_sxc_sampler, config_key, do_build=input_args.build_block, only_test=input_args.only_test, 
            n_slbl_samples=1, main_oversample=False)
    train_dset, test_dset = block.train.dset, block.test.dset

    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=800,
        per_device_eval_batch_size=800,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        eval_strategy="steps",
        eval_steps=1000,
        save_steps=1000,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        representation_search_type='BRUTEFORCE',
        adam_epsilon=1e-6,                                                                                                                                          warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-4,
    
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,
    
        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
    
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,

        use_cpu_for_searching=True,
        use_cpu_for_clustering=True,
    )

    def model_fn(mname):
        model = DBT009.from_pretrained(mname, margin=0.3, tau=0.1, n_negatives=10, apply_softmax=True, use_encoder_parallel=True)
        return model
    
    def init_fn(model): 
        model.init_dr_head()

    @patch
    def forward(
        self:DBT009Encoder, 
        input_ids:Optional[torch.Tensor]=None, 
        attention_mask:Optional[torch.Tensor]=None,
        **kwargs
    ):
        self.dr_activation = get_activation(self.config.activation)
        
        o = self.distilbert(
            input_ids=input_ids,
            attention_mask=attention_mask,
            **kwargs
        )

        rep = self.dr_transform(o[0])
        if input_args.activation: rep = self.dr_activation(rep)
        if input_args.use_ln: rep = self.dr_layer_norm(rep)
        rep = self.dr_projector(rep)
        
        if input_args.normalize: return o, F.normalize(Pooling.mean_pooling(rep, attention_mask), dim=1)
        else: return o, Pooling.mean_pooling(rep, attention_mask)

    metric = PrecReclMrr(test_dset.data.n_lbl, test_dset.data.data_lbl_filterer, prop=train_dset.data.data_lbl, 
            pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200], mk=[5, 10, 20])

    model = load_model(args.output_dir, model_fn, {"mname": mname}, init_fn, do_inference=do_inference, use_pretrained=input_args.use_pretrained)
    
    learn = XCLearner(
        model=model,
        args=args,
        train_dataset=train_dset,
        eval_dataset=test_dset,
        data_collator=block.collator,
        compute_metrics=metric,
    )
    
    lbl_repr = learn._get_lbl_representation(test_dset, to_cpu=True)

    save_dir = f'{output_dir}/lbl_repr'
    os.makedirs(save_dir, exist_ok=True)

    def get_save_file(save_dir, input_args):
        save_file = f'{save_dir}/lbl_repr'
        save_file = f'{save_file}_ln' if input_args.use_ln else f'{save_file}_uln' 
        save_file = f'{save_file}-norm' if input_args.normalize else f'{save_file}-unorm' 
        save_file = f'{save_file}-act' if input_args.activation else f'{save_file}-uact' 
        if input_args.use_pretrained: save_file = f'{save_file}_{mname}'
        save_file = f'{save_file}.pth'
        return save_file

    save_file = get_save_file(save_dir, input_args)
    torch.save(lbl_repr, save_file)
    
