# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_msmarco-linker.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/01_msmarco-linker.ipynb 3
import os
os.environ['HIP_VISIBLE_DEVICES'] = '12,13,14,15'

import torch,json, torch.multiprocessing as mp, joblib, numpy as np, scipy.sparse as sp, argparse

from xcai.basics import *
from xcai.models.PPP0XX import DBT009,DBT011

# %% ../nbs/01_msmarco-linker.ipynb 5
os.environ['WANDB_PROJECT'] = 'mogicX_00-msmarco-linker'

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--build_block', action='store_true')
    parser.add_argument('--use_pretrained', action='store_true')
    
    parser.add_argument('--do_train_inference', action='store_true')
    parser.add_argument('--do_test_inference', action='store_true')
    
    parser.add_argument('--save_train_prediction', action='store_true')
    parser.add_argument('--save_test_prediction', action='store_true')
    parser.add_argument('--save_label_prediction', action='store_true')
    
    parser.add_argument('--save_representation', action='store_true')
    
    parser.add_argument('--use_sxc_sampler', action='store_true')
    parser.add_argument('--only_test', action='store_true')

    parser.add_argument('--pickle_dir', type=str, required=True)
    
    parser.add_argument('--prediction_suffix', type=str, default='')
    
    parser.add_argument('--dataset', type=str, required=True)
    return parser.parse_args()

# %% ../nbs/01_msmarco-linker.ipynb 20
if __name__ == '__main__':
    output_dir = '/data/outputs/mogicX/01-msmarco-gpt-entity-linker-001'

    input_args = parse_args()

    config_file = f'/home/aiscuser/scratch1/datasets/{input_args.dataset}/XC/configs/data.json'
    config_key = 'data'

    mname = 'sentence-transformers/msmarco-distilbert-dot-v5'

    pkl_file = f'{input_args.pickle_dir}/mogicX/{input_args.dataset}_data_distilbert-base-uncased'
    pkl_file = f'{pkl_file}_sxc' if input_args.use_sxc_sampler else f'{pkl_file}_xcs'
    if input_args.only_test: pkl_file = f'{pkl_file}_only-test'
    pkl_file = f'{pkl_file}.joblib'

    do_inference = input_args.do_train_inference or input_args.do_test_inference or input_args.save_train_prediction or input_args.save_test_prediction or input_args.save_representation

    os.makedirs(os.path.dirname(pkl_file), exist_ok=True)
    block = build_block(pkl_file, config_file, input_args.use_sxc_sampler, config_key, do_build=input_args.build_block, only_test=input_args.only_test)

    # entity information
    pkl_file = '/data/from_b/wiki-entity_meta-info.joblib'

    if os.path.exists(pkl_file):
        meta_info = joblib.load(pkl_file)
    else:
        fname = '/data/from_b/wiki_entity.raw.csv'
        meta_info = Info.from_txt(fname, max_sequence_length=32, padding=True, return_tensors='pt', info_column_names=["identifier", "input_text"],
                tokenization_column="input_text", use_tokenizer=True, tokenizer=mname)
        joblib.dump(meta_info, pkl_file)

    tst_linker_dset = SXCDataset(SMainXCDataset(data_info=block.test.dset.data.data_info, lbl_info=meta_info))
    trn_linker_dset = None if block.train is None else SXCDataset(SMainXCDataset(data_info=block.train.dset.data.data_info, lbl_info=meta_info))

    lbl_pred = sp.csr_matrix((block.n_lbl, tst_linker_dset.data.n_lbl), dtype=np.float32)
    sp.save_npz(f'{output_dir}/predictions/label_predictions_wiki-{input_args.dataset}.npz', lbl_pred)
    # entity information

    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=800,
        per_device_eval_batch_size=2000,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        eval_strategy="steps",
        eval_steps=5000,
        save_steps=5000,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        representation_search_type='BRUTEFORCE',
        adam_epsilon=1e-6,
        warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-6,
    
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,
    
        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
    
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,

        use_cpu_for_searching=True,
        use_cpu_for_clustering=True,
    )

    def model_fn(mname, bsz):
        model = DBT009.from_pretrained(mname, bsz=bsz, tn_targ=5000, margin=0.3, tau=0.1, n_negatives=10, 
                                       apply_softmax=True, use_encoder_parallel=True)
        return model
    
    def init_fn(model): 
        model.init_dr_head()

    bsz = max(args.per_device_train_batch_size, args.per_device_eval_batch_size)*torch.cuda.device_count()

    model = load_model(args.output_dir, model_fn, {"mname": mname, "bsz": bsz}, init_fn, do_inference=do_inference, 
            use_pretrained=input_args.use_pretrained)
    
    learn = XCLearner(
        model=model,
        args=args,
        train_dataset=tst_linker_dset if trn_linker_dset is None else trn_linker_dset,
        eval_dataset=tst_linker_dset,
        data_collator=block.collator,
    )
    
    main(learn, input_args, n_lbl=tst_linker_dset.data.n_lbl, eval_k=10, train_k=10)
    
