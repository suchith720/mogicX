# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/38_oak-distilbert-for-msmarco-from-scratch.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/38_oak-distilbert-for-msmarco-from-scratch.ipynb 2
import os
os.environ['CUDA_VISIBLE_DEVICES'] = '0,1'

import torch,json, torch.multiprocessing as mp, joblib, numpy as np, scipy.sparse as sp

from transformers import DistilBertConfig

from xcai.basics import *
from xcai.models.oak import OAK016

# %% ../nbs/38_oak-distilbert-for-msmarco-from-scratch.ipynb 4
os.environ['WANDB_PROJECT'] = 'mogicX_00-msmarco-06'

# %% ../nbs/38_oak-distilbert-for-msmarco-from-scratch.ipynb 7
if __name__ == '__main__':
    output_dir = '/home/aiscuser/scratch1/outputs/mogicX/49_oak-oracle-distilbert-for-msmarco-from-scratch-with-all-category-metadata-001'
    
    input_args = parse_args()

    # Load data
    mname = 'distilbert-base-uncased'
    meta_name = 'cat'

    if input_args.exact:
        config_file = '/data/share/from_deepak/XC/configs/data_lbl_ngame-gpt-all-category_ce-negatives-topk-05-linker_exact.json'
    else:
        config_file = '/data/share/from_deepak/XC/configs/data_lbl_ngame-gpt-all-category_ce-negatives-topk-05-linker.json'

    config_key, fname = get_config_key(config_file)

    pkl_file = get_pkl_file(input_args.pickle_dir, f'msmarco_{fname}_distilbert-base-uncased', input_args.use_sxc_sampler, input_args.exact, 
            input_args.only_test, use_oracle=input_args.use_oracle, use_text_mode=input_args.text_mode)
    os.makedirs(os.path.dirname(pkl_file), exist_ok=True)

    block_args = {
        'pkl_file': pkl_file,
        'config': config_file,
        'use_sxc': input_args.use_sxc_sampler,
        'config_key': config_key,
        'do_build': input_args.build_block,
        'only_test': input_args.only_test,
        'main_oversample': True,
        'meta_oversample': {f'{meta_name}_meta':False, 'neg_meta':True},
        'n_slbl_samples': 1,
        'n_sdata_meta_samples': {f'{meta_name}_meta':5, 'neg_meta':1},
        'return_scores': True,
        'train_meta_topk': {f'{meta_name}_meta':5},
        'test_meta_topk': {f'{meta_name}_meta':5},
    }
    block = build_block(**block_args)

    # Metadata clustering

    do_inference = check_inference_mode(input_args)

    clustering_args = {
        'output_dir': output_dir,
        'do_inference': do_inference,
        'use_pretrained': input_args.use_pretrained,
        'num_metadata': block.test.dset.meta[f'{meta_name}_meta'].n_meta,
        'cluster_size': 1,
        'meta_embed_init_file': None,
        'model_name': 'sentence-transformers/msmarco-distilbert-dot-v5',
        'meta_info': block.test.dset.meta[f'{meta_name}_meta'].meta_info,
        'collator': block.collator,
        'normalize': input_args.normalize,
        'use_layer_norm': input_args.use_ln,
        'meta_name': meta_name,
    }

    metadata_idx2cluster, meta_repr, num_meta_cluster = get_cluster_mapping(**clustering_args)

    # Training arguments

    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=128,
        per_device_eval_batch_size=800,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        eval_strategy="steps",
        eval_steps=1000,
        save_steps=1000,
        save_total_limit=5,
        num_train_epochs=50,
        predict_with_representation=True,
        adam_epsilon=1e-6,
        warmup_steps=1000,
        weight_decay=0.01,
        learning_rate=6e-5,
        representation_search_type='BRUTEFORCE',
        search_normalize=False,
    
        output_representation_attribute='data_fused_repr',
        label_representation_attribute='data_repr',
        metadata_representation_attribute='data_repr',
        data_augmentation_attribute='data_repr',
        representation_attribute='data_fused_repr',
        clustering_representation_attribute='data_fused_repr',

        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        use_data_metadata_for_clustering=True,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,

        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
    
        use_distributional_representation=False,
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,
        
        label_names=[f'{meta_name}2data_idx', f'{meta_name}2data_data2ptr'],

        prune_metadata=False,
        num_metadata_prune_warmup_epochs=10,
        num_metadata_prune_epochs=5,
        metadata_prune_batch_size=2048,
        prune_metadata_names=[f'{meta_name}_meta'],
        use_data_metadata_for_pruning=True,
    
        predict_with_augmentation=False,
        use_augmentation_index_representation=True,
    
        data_aug_meta_name=meta_name,
        augmentation_num_beams=None,
        data_aug_prefix=meta_name,
        use_label_metadata=False,

        data_meta_batch_size=2048,
        augment_metadata=False,
        num_metadata_augment_warmup_epochs=10,
        num_metadata_augment_epochs=5,
    
        use_cpu_for_searching=True,
        use_cpu_for_clustering=True,
    )
        
    def model_fn(mname):
        model = OAK016.from_pretrained(mname, margin=0.3, num_negatives=10, tau=0.1, apply_softmax=True,
                               
                                       data_aug_meta_prefix=f'{meta_name}2data', lbl2data_aug_meta_prefix=None,
                                       neg2data_aug_meta_prefix=None,
                                       
                                       num_metadata=block.test.dset.meta[f'{meta_name}_meta'].n_meta, num_meta_clusters=num_meta_cluster, 
                                       
                                       calib_margin=0.05, calib_num_negatives=10, calib_tau=0.1, calib_apply_softmax=False, 
                                       calib_loss_weight=0.1, use_calib_loss=False,
        
                                       use_query_loss=False,
                                       
                                       use_encoder_parallel=True, normalize=False, use_layer_norm=False)
        return model
    
    def init_fn(model):
        model.init_retrieval_head()
        model.init_cross_head()
        model.init_meta_embeddings()

        model.encoder.set_pretrained_meta_embeddings(meta_repr)
        model.encoder.freeze_pretrained_meta_embeddings()

        model.encoder.set_metadata_mapping(metadata_idx2cluster)

    model = load_model(args.output_dir, model_fn, {"mname": mname}, init_fn, do_inference=do_inference, use_pretrained=input_args.use_pretrained)

    metric = PrecReclMrr(block.test.dset.n_lbl, block.test.data_lbl_filterer, pk=10, rk=200, rep_pk=[1, 3, 5, 10], 
                         rep_rk=[10, 100, 200], mk=[5, 10, 20])

    learn = XCLearner(
        model=model,
        args=args,
        train_dataset=None if block.train is None else block.train.dset,
        eval_dataset=block.test.dset,
        data_collator=block.collator,
        compute_metrics=metric,
    )

    main(learn, input_args, n_lbl=block.test.dset.n_lbl)
