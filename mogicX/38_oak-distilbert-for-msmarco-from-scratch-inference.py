# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/38_oak-distilbert-for-msmarco-from-scratch.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/38_oak-distilbert-for-msmarco-from-scratch.ipynb 2
import os
os.environ['HIP_VISIBLE_DEVICES'] = '8,9,10,11'

import torch,json, torch.multiprocessing as mp, joblib, numpy as np, scipy.sparse as sp, argparse

from transformers import DistilBertConfig

from xcai.basics import *
from xcai.models.oak import OAK016

# %% ../nbs/38_oak-distilbert-for-msmarco-from-scratch.ipynb 4
os.environ['WANDB_PROJECT'] = 'mogicX_00-msmarco-06'

def extra_parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--expt_no', type=int, required=True)
    return parser.parse_known_args()[0]

# %% ../nbs/38_oak-distilbert-for-msmarco-from-scratch.ipynb 7
if __name__ == '__main__':
    
    input_args = parse_args()
    extra_args = extra_parse_args()

    output_dir = f'/home/aiscuser/scratch1/outputs/mogicX/38_oak-distilbert-for-msmarco-from-scratch-{extra_args.expt_no:03d}'
    print(f'Output directory: {output_dir}')

    input_args.exact, input_args.do_test_inference, input_args.only_test = False, True, True

    config_args = {
        'config_file' : '/data/datasets/msmarco/XC/configs/data_gpt-entity.json',
        'config_key' : 'data_entity-gpt',
        'model_name': 'sentence-transformers/msmarco-distilbert-dot-v5',
        'meta_name': 'ent',
        'meta_embed_init_file': '/data/outputs/39_oak-for-msmarco-with-hard-negatives/ent_repr_uln-unorm_distilbert-base-uncased.pth',
    }

    block_name = os.path.basename(config_args['config_file']).split('.')[0].split('_', maxsplit=1)[1]
    pkl_file = get_pkl_file(input_args.pickle_dir, f'msmarco_data-{block_name}_distilbert-base-uncased', input_args.use_sxc_sampler, 
                            input_args.exact, input_args.only_test, use_oracle=input_args.use_oracle)
    os.makedirs(os.path.dirname(pkl_file), exist_ok=True)

    do_inference = check_inference_mode(input_args) 
    meta_name = config_args['meta_name']

    def data_prompt(txt): return f"{txt} <METADATA> "
    block = build_block(pkl_file, config_args['config_file'], input_args.use_sxc_sampler, config_args['config_key'], do_build=input_args.build_block, 
                        only_test=input_args.only_test, main_oversample=True, meta_oversample={f'{meta_name}_meta':False, 'neg_meta':True}, 
                        n_slbl_samples=1, n_sdata_meta_samples={f'{meta_name}_meta':5, 'neg_meta':1}, return_scores=True, 
                        train_meta_topk={f"{meta_name}_meta":5}, test_meta_topk={f"{meta_name}_meta":5}, use_oracle=input_args.use_oracle, 
                        meta_name="ent", prompt=data_prompt, main_max_data_sequence_length=128)


    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=256,
        per_device_eval_batch_size=1600,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        eval_strategy="steps",
        eval_steps=1000,
        save_steps=1000,
        save_total_limit=5,
        num_train_epochs=30,
        predict_with_representation=True,
        adam_epsilon=1e-6,
        warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-5,
        representation_search_type='BRUTEFORCE',
        search_normalize=False,
    
        # representation_attribute='data_fused_repr',
        # output_representation_attribute='data_fused_repr',
        # clustering_representation_attribute='data_fused_repr',

        representation_attribute='data_repr',
        output_representation_attribute='data_repr',
        clustering_representation_attribute='data_repr',

        data_augmentation_attribute='data_repr',
        label_representation_attribute='data_repr',
        metadata_representation_attribute='data_repr',

        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        use_data_metadata_for_clustering=True,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,

        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
    
        use_distributional_representation=False,
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,
        
        label_names=[f'{meta_name}2data_idx', f'{meta_name}2data_data2ptr'],

        prune_metadata=False,
        num_metadata_prune_warmup_epochs=10,
        num_metadata_prune_epochs=5,
        metadata_prune_batch_size=2048,
        prune_metadata_names=[f'{meta_name}_meta'],
        use_data_metadata_for_pruning=True,
    
        predict_with_augmentation=False,
        use_augmentation_index_representation=True,
    
        data_aug_meta_name=meta_name,
        augmentation_num_beams=None,
        data_aug_prefix=meta_name,
        use_label_metadata=False,

        data_meta_batch_size=2048,
        augment_metadata=False,
        num_metadata_augment_warmup_epochs=10,
        num_metadata_augment_epochs=5,
    
        use_cpu_for_searching=True,
        use_cpu_for_clustering=True,
    )
        
    def model_fn(mname):
        model = OAK016.from_pretrained(mname, margin=0.3, num_negatives=10, tau=0.1, apply_softmax=True,
                                   
                                       data_aug_meta_prefix=f'{meta_name}2data', lbl2data_aug_meta_prefix=None,
                                       neg2data_aug_meta_prefix=None,
                                       
                                       num_metadata=block.test.dset.meta[f'{meta_name}_meta'].n_meta, 
                                       
                                       calib_margin=0.05, calib_num_negatives=10, calib_tau=0.1, calib_apply_softmax=False, 
                                       calib_loss_weight=0.1, use_calib_loss=False,
            
                                       use_query_loss=False,
                                       
                                       use_encoder_parallel=True, normalize=False, use_layer_norm=False)
        return model
    
    def init_fn(model):
        model.init_retrieval_head()
        model.init_cross_head()
        model.init_meta_embeddings()

        meta_embeddings = torch.load(config_args['meta_embed_init_file'])
        model.encoder.set_pretrained_meta_embeddings(meta_embeddings)
        model.encoder.freeze_pretrained_meta_embeddings()


    model = load_model(args.output_dir, model_fn, {"mname": config_args['model_name']}, init_fn, do_inference=do_inference, 
                       use_pretrained=input_args.use_pretrained)
    model.encoder.dr_head = torch.nn.Identity()

    metric = PrecReclMrr(block.test.dset.n_lbl, block.test.data_lbl_filterer, pk=10, rk=200, rep_pk=[1, 3, 5, 10], 
                         rep_rk=[10, 100, 200], mk=[5, 10, 20])

    learn = XCLearner(
        model=model,
        args=args,
        train_dataset=None if block.train is None else block.train.dset,
        eval_dataset=block.test.dset,
        data_collator=block.collator,
        compute_metrics=metric,
    )
    
    main(learn, input_args, n_lbl=block.test.dset.n_lbl)
    
