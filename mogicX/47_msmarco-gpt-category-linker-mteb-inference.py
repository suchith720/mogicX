# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_ngame-for-msmarco-inference.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/00_ngame-for-msmarco-inference.ipynb 3
import os
os.environ['HIP_VISIBLE_DEVICES'] = '4,5'

import torch,json, torch.multiprocessing as mp, joblib, numpy as np, scipy.sparse as sp, argparse

from xcai.basics import *
from xcai.models.PPP0XX import DBT009

from xcai.sdata import SXCDataset, SMainXCDataset

# %% ../nbs/00_ngame-for-msmarco-inference.ipynb 5
os.environ['WANDB_PROJECT'] = 'mogicX_00-msmarco-linker-01'

# %% ../nbs/00_ngame-for-msmarco-inference.ipynb 20
if __name__ == '__main__':
    output_dir = '/data/outputs/mogicX/47_msmarco-gpt-category-linker-001'

    input_args = parse_args()

    mname = 'sentence-transformers/msmarco-distilbert-cos-v5'

    config_file = f'/data/datasets/{input_args.dataset}/XC/configs/data.json'
    config_key, fname = get_config_key(config_file)

    pkl_file = get_pkl_file(input_args.pickle_dir, f'{input_args.dataset}_{fname}_distilbert-base-uncased', input_args.use_sxc_sampler, 
                            input_args.exact, input_args.only_test)

    do_inference = check_inference_mode(input_args)

    os.makedirs(os.path.dirname(pkl_file), exist_ok=True)
    block = build_block(pkl_file, config_file, input_args.use_sxc_sampler, config_key, do_build=input_args.build_block, only_test=input_args.only_test, 
            n_slbl_samples=1, main_oversample=False)

    # category information
    meta_info_file = "outputs/msmarco_category-gpt.joblib"
    if os.path.exists(meta_info_file):
        meta_info = joblib.load(meta_info_file)
    else:
        fname = '/data/datasets/msmarco/XC/raw_data/category-gpt.raw.csv'
        meta_info = Info.from_txt(fname, max_sequence_length=32, padding=True, return_tensors='pt', info_column_names=["identifier", "input_text"],
                tokenization_column="input_text", use_tokenizer=True, tokenizer="sentence-transformers/msmarco-distilbert-dot-v5")
        joblib.dump(meta_info, meta_info_file)

    mteb_dset = SXCDataset(SMainXCDataset(data_info=block.test.dset.data.data_info, lbl_info=meta_info))
    # category information

    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=800,
        per_device_eval_batch_size=800,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        eval_strategy="steps",
        eval_steps=1000,
        save_steps=1000,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        representation_search_type='BRUTEFORCE',
        adam_epsilon=1e-6,                                                                                                                                          warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-4,
    
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,
    
        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
    
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,

        use_cpu_for_searching=True,
        use_cpu_for_clustering=True,
    )

    def model_fn(mname):
        model = DBT009.from_pretrained(mname, margin=0.3, tau=0.1, n_negatives=10, apply_softmax=True, use_encoder_parallel=True)
        return model
    
    def init_fn(model): 
        model.init_dr_head()

    model = load_model(args.output_dir, model_fn, {"mname": mname}, init_fn, do_inference=do_inference, use_pretrained=input_args.use_pretrained)
    
    learn = XCLearner(
        model=model,
        args=args,
        train_dataset=mteb_dset,
        eval_dataset=mteb_dset,
        data_collator=block.collator,
    )
    
    main(learn, input_args, n_lbl=mteb_dset.n_lbl, eval_k=10, train_k=10)
    
