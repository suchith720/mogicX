# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_ngame-for-msmarco-inference.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/00_ngame-for-msmarco-inference.ipynb 3
import os, torch,json, torch.multiprocessing as mp, joblib, numpy as np, scipy.sparse as sp, argparse

from xcai.basics import *
from xcai.models.PPP0XX import DBT009
from xcai.sdata import identity_collate_fn, SXCDataset, SMainXCDataset

# %% ../nbs/00_ngame-for-msmarco-inference.ipynb 5
os.environ['WANDB_PROJECT'] = 'mogicX_00-msmarco-linker-01'

def additional_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--expt_no', type=int, required=True)
    parser.add_argument('--meta_type', type=str, default=None)
    return parser.parse_known_args()[0]
    
# %% ../nbs/00_ngame-for-msmarco-inference.ipynb 20
if __name__ == '__main__':
    extra_args = additional_args()
    output_dir = f'/data/outputs/mogicX/47_msmarco-gpt-category-linker-{extra_args.expt_no:03d}'

    input_args = parse_args()
    input_args.use_sxc_sampler = True
    input_args.do_test_inference = True
    input_args.save_test_prediction = True
    input_args.save_train_prediction = True
    input_args.pickle_dir = '/home/aiscuser/scratch1/datasets/processed/'

    mname = 'sentence-transformers/msmarco-distilbert-cos-v5'

    do_inference = check_inference_mode(input_args)

    # load data
    expt_info = {
        1: '', 

        2: '_conflated', 
        3: '_conflated-001', 
        4: '_conflated-002', 

        7: '-linker_conflated-001_conflated-001', 
        8: '-linker_conflated-001_conflated-001',
        9: '-linker_conflated-001_conflated-001',
    }

    ## test data 
    raw_dir = f'/data/datasets/beir/{input_args.dataset}/XC/raw_data/'
    fname = f'{raw_dir}/test.raw.txt' if input_args.dataset == "msmarco" else f'{raw_dir}/test.raw.csv'
    test_info = Info.from_txt(fname, max_sequence_length=32, padding=True, return_tensors='pt', info_column_names=["identifier", "input_text"],
                              tokenization_column="input_text", use_tokenizer=True, tokenizer=mname)

    ## train data
    if input_args.do_train_inference:
        fname = f'{raw_dir}/train.raw.txt' if input_args.dataset == "msmarco" else f'{raw_dir}/train.raw.csv'
        train_info = Info.from_txt(fname, max_sequence_length=32, padding=True, return_tensors='pt', info_column_names=["identifier", "input_text"],
                                   tokenization_column="input_text", use_tokenizer=True, tokenizer=mname)

    ## metadata
    if extra_args.meta_type is not None and extra_args.meta_type == "wiki":
        save_dir_name = 'wiki_entities'
        meta_info_file = "outputs/wiki-entities.joblib"

        if os.path.exists(meta_info_file):
            meta_info = joblib.load(meta_info_file)
        else:
            fname = '/data/datasets/beir/msmarco/XC/raw_data/wiki-entity_ngame.raw.csv'
            meta_info = Info.from_txt(fname, max_sequence_length=64, padding=True, return_tensors='pt', info_column_names=["identifier", "input_text"],
                                      tokenization_column="input_text", use_tokenizer=True, tokenizer=mname)
            joblib.dump(meta_info, meta_info_file)
    else:
        save_dir_name = None
        meta_info_file = f"outputs/msmarco_category-gpt{expt_info[extra_args.expt_no]}.joblib"

        if os.path.exists(meta_info_file):
            meta_info = joblib.load(meta_info_file)
        else:
            fname = f'/data/datasets/beir/msmarco/XC/raw_data/category-gpt{expt_info[extra_args.expt_no]}.raw.csv'
            meta_info = Info.from_txt(fname, max_sequence_length=64, padding=True, return_tensors='pt', info_column_names=["identifier", "input_text"],
                                      tokenization_column="input_text", use_tokenizer=True, tokenizer=mname)
            joblib.dump(meta_info, meta_info_file)

    test_dset = SXCDataset(SMainXCDataset(data_info=test_info, lbl_info=meta_info))
    train_dset = SXCDataset(SMainXCDataset(data_info=train_info, lbl_info=meta_info)) if input_args.do_train_inference else None
    # load data 

    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=800,
        per_device_eval_batch_size=800,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        eval_strategy="steps",
        eval_steps=1000,
        save_steps=1000,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        representation_search_type='BRUTEFORCE',
        adam_epsilon=1e-6,                                                                                                                                          warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-4,
    
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,
    
        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
    
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,

        use_cpu_for_searching=True,
        use_cpu_for_clustering=True,
    )

    def model_fn(mname):
        model = DBT009.from_pretrained(mname, margin=0.3, tau=0.1, n_negatives=10, apply_softmax=True, use_encoder_parallel=True)
        return model
    
    def init_fn(model): 
        model.init_dr_head()

    model = load_model(args.output_dir, model_fn, {"mname": mname}, init_fn, do_inference=do_inference, use_pretrained=input_args.use_pretrained)
    
    learn = XCLearner(
        model=model,
        args=args,
        train_dataset=train_dset,
        eval_dataset=test_dset,
        data_collator=identity_collate_fn,
    )
    
    main(learn, input_args, n_lbl=mteb_dset.n_lbl, eval_k=10, train_k=10, save_dir_name=save_dir_name)
    
