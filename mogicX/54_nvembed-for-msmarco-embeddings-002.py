# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/37_training-msmarco-distilbert-from-scratch.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/37_training-msmarco-distilbert-from-scratch.ipynb 2
import os, torch, json, torch.multiprocessing as mp, joblib, numpy as np, scipy.sparse as sp, argparse, math

from transformers import AutoTokenizer

from xcai.basics import *
from xcai.models.nvembed.NVM0XX import NVM009
from xcai.sdata import SMainXCDataset, SXCDataset, identity_collate_fn 

from sugar.core import load_raw_file

# %% ../nbs/37_training-msmarco-distilbert-from-scratch.ipynb 4
os.environ['WANDB_PROJECT'] = 'mogicX_00-msmarco-08'

def get_instruction(fname, dset):
    with open(fname) as file:
        instructions = json.load(file)
    return instructions[dset]


def tokenized_labels(lbl_info_file:str, idx:int, parts:int):
    lbl_ids, lbl_txt = load_raw_file(lbl_info_file)

    num_lbls = len(lbl_ids)
    bsize = math.ceil(num_lbls / parts)
    start_idx, end_idx = idx*bsize, (idx + 1)*bsize

    lbl_ids, lbl_txt = lbl_ids[start_idx:end_idx], lbl_txt[start_idx:end_idx]

    mname = 'nvidia/NV-Embed-v2'
    tokz = AutoTokenizer.from_pretrained(mname)
    lbl_toks = tokz(lbl_txt, padding=True, return_tensors='pt', truncation=True, max_length=300)

    lbl_info = {'input_text': lbl_txt, 'identifier': lbl_ids}
    lbl_info.update(lbl_toks)

    dataset = SXCDataset(SMainXCDataset(data_info=lbl_info))
    return dataset


def tokenized_query(qry_info_file:str, idx:int, parts:int):
    qry_ids, qry_txt = load_raw_file(qry_info_file)

    num_qrys = len(qry_ids)
    bsize = math.ceil(num_qrys / parts)
    start_idx, end_idx = idx*bsize, (idx + 1)*bsize

    mname = 'nvidia/NV-Embed-v2'
    instruct_file = "/home/aiscuser/scratch1/xcai/xcai/models/nvembed/instructions.json"
    data_prompt_func = lambda x: "Instruct: " + get_instruction(instruct_file, "MSMARCO")["query"] + f"\nQuery: {x}"

    qry_ids, qry_txt = qry_ids[start_idx:end_idx], qry_txt[start_idx:end_idx]
    qry_txt = [data_prompt_func(o) for o in qry_txt]

    mname = 'nvidia/NV-Embed-v2'
    tokz = AutoTokenizer.from_pretrained(mname)
    qry_toks = tokz(qry_txt, padding=True, return_tensors='pt', truncation=True, max_length=300)

    qry_info = {'input_text': qry_txt, 'identifier': qry_ids}
    qry_info.update(qry_toks)

    dataset = SXCDataset(SMainXCDataset(data_info=qry_info))
    return dataset


def get_and_save_representation(dataset, fname:str):
    rep = learn._get_data_representation(dataset)
    rep = rep.to(torch.float16)
    torch.save(rep, fname)


def additional_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--idx', type=int, required=True)
    parser.add_argument('--parts', type=int, required=True)

    parser.add_argument('--get_lbl_repr', action='store_true')

    parser.add_argument('--get_tst_repr', action='store_true')
    parser.add_argument('--get_trn_repr', action='store_true')

    return parser.parse_known_args()[0]


# %% ../nbs/37_training-msmarco-distilbert-from-scratch.ipynb 21
if __name__ == '__main__':
    output_dir = '/home/aiscuser/scratch1/outputs/mogicX/54_nvembed-for-msmarco-001'
    # output_dir = '/data/outputs/mogicX/54_nvembed-for-msmarco-001'

    input_args = parse_args()
    extra_args = additional_args()

    mname = 'nvidia/NV-Embed-v2'

    do_inference = check_inference_mode(input_args)

    if extra_args.get_lbl_repr:
        lbl_info_file = "/data/datasets/beir/msmarco/XC/raw_data/label.raw.txt"
        dataset = tokenized_labels(lbl_info_file, extra_args.idx, extra_args.parts)

    if extra_args.get_tst_repr:
        qry_info_file = "/data/datasets/beir/msmarco/XC/raw_data/test.raw.txt"
        dataset = tokenized_query(qry_info_file, extra_args.idx, extra_args.parts)

    if extra_args.get_trn_repr:
        qry_info_file = "/data/datasets/beir/msmarco/XC/raw_data/train.raw.txt"
        dataset = tokenized_query(qry_info_file, extra_args.idx, extra_args.parts)

    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=128,
        per_device_eval_batch_size=32,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        eval_strategy="steps",
        eval_steps=5000,
        save_steps=5000,
        save_total_limit=5,
        num_train_epochs=50,
        predict_with_representation=True,
        representation_search_type='BRUTEFORCE',
        search_normalize=False, 

        adam_epsilon=1e-6,
        warmup_steps=1000,
        weight_decay=0.01,
        learning_rate=6e-5,
        label_names=['plbl2data_idx', 'plbl2data_data2ptr'],
    
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,
    
        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
    
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,

        use_cpu_for_searching=True,
        use_cpu_for_clustering=True,
    )

    def model_fn(mname):
        model = NVM009.from_pretrained(mname, margin=0.3, tau=0.1, n_negatives=10, normalize=False, apply_softmax=True, use_encoder_parallel=True)
        return model

    def init_fn(model): 
        pass
    
    model = load_model(args.output_dir, model_fn, {"mname": mname}, init_fn, do_inference=do_inference, use_pretrained=input_args.use_pretrained)
    
    learn = XCLearner(
        model=model,
        args=args,
        eval_dataset=dataset,
        data_collator=identity_collate_fn,
    )

    save_dir = f"{args.output_dir}/predictions/"
    os.makedirs(save_dir, exist_ok=True)

    if extra_args.get_lbl_repr: get_and_save_representation(dataset, f'{save_dir}/lbl_repr_{extra_args.idx:03d}.pth')
    if extra_args.get_trn_repr: get_and_save_representation(dataset, f'{save_dir}/trn_repr_{extra_args.idx:03d}.pth')
    if extra_args.get_tst_repr: get_and_save_representation(dataset, f'{save_dir}/tst_repr_{extra_args.idx:03d}.pth')
