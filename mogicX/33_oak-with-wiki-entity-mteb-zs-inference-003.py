# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/33_ngame-mteb-inference.ipynb.

# %% auto 0
__all__ = ['parse_args']

# %% ../nbs/33_ngame-mteb-inference.ipynb 3
import os
os.environ['HIP_VISIBLE_DEVICES'] = '8,9,10,11,12,13'
os.environ["NCCL_DEBUG"] = "NONE"
os.environ["ROCM_DISABLE_WARNINGS"] = "1"
os.environ["MIOPEN_LOG_LEVEL"] = "0"

import torch,json, torch.multiprocessing as mp, joblib, numpy as np, scipy.sparse as sp, argparse

from transformers import DistilBertConfig

from xcai.sdata import *
from xcai.core import Info
from xcai.basics import *
from xcai.models.oak import OAK003

# %% ../nbs/33_ngame-mteb-inference.ipynb 5
os.environ['WANDB_PROJECT'] = 'mogicX_00-msmarco'

from typing import List

from fastcore.meta import *
from fastcore.utils import *

entity_mapper = joblib.load('/data/from_b/wiki-entity_2_entity-gpt.joblib')

@patch
def _store_indices(self:SMetaXCDataset):
    if self.data_meta is not None: self.curr_data_meta = [[entity_mapper[x] for x in o.indices.tolist()] for o in self.data_meta]
    if self.lbl_meta is not None: self.curr_lbl_meta = [[entity_mapper[x] for x in o.indices.tolist()] for o in self.lbl_meta]

# %% ../nbs/33_ngame-mteb-inference.ipynb 7
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--build_block', action='store_true')
    parser.add_argument('--use_pretrained', action='store_true')
    
    parser.add_argument('--do_train_inference', action='store_true')
    parser.add_argument('--do_test_inference', action='store_true')
    
    parser.add_argument('--save_train_prediction', action='store_true')
    parser.add_argument('--save_test_prediction', action='store_true')
    parser.add_argument('--save_label_prediction', action='store_true')
    
    parser.add_argument('--save_representation', action='store_true')
    
    parser.add_argument('--use_sxc_sampler', action='store_true')
    parser.add_argument('--only_test', action='store_true')

    parser.add_argument('--pickle_dir', type=str, required=True)
    
    parser.add_argument('--prediction_suffix', type=str, default='')
    
    parser.add_argument('--dataset', type=str, required=True)
    return parser.parse_args()
    

# %% ../nbs/33_ngame-mteb-inference.ipynb 32
if __name__ == '__main__':
    output_dir = '/home/aiscuser/scratch1/outputs/mogicX/32_oak-for-msmarco-from-scratch-001'

    input_args = parse_args()

    data_dir = None

    config_file = f'/home/aiscuser/scratch1/datasets/{input_args.dataset}/XC/configs/data_entity-gpt_ngame.json'
    config_key = 'data_entity-gpt-ngame'
    
    meta_name = 'ent'
    mname = 'sentence-transformers/msmarco-distilbert-cos-v5'
    meta_embed_init_file = '/data/outputs/mogicX/01-msmarco-gpt-entity-linker-001/predictions/label_repr_full.pth'

    pkl_file = f'{input_args.pickle_dir}/mogicX/{input_args.dataset}_data-entity-gpt-ngame_distilbert-base-uncased'
    pkl_file = f'{pkl_file}_sxc' if input_args.use_sxc_sampler else f'{pkl_file}_xcs'
    if input_args.only_test: pkl_file = f'{pkl_file}_only-test'
    pkl_file = f'{pkl_file}.joblib'

    do_inference = input_args.do_train_inference or input_args.do_test_inference or input_args.save_train_prediction or input_args.save_test_prediction or input_args.save_representation

    os.makedirs(os.path.dirname(pkl_file), exist_ok=True)
    block = build_block(pkl_file, config_file, input_args.use_sxc_sampler, config_key, do_build=input_args.build_block, only_test=input_args.only_test, 
                        n_slbl_samples=1, main_oversample=False, n_sdata_meta_samples=5, meta_oversample=False, train_meta_topk=5, test_meta_topk=3, 
                        data_dir=data_dir)

    # wiki entity
    pkl_file = '/data/from_b/wiki-entity_meta-info.joblib'
    meta_info = joblib.load(pkl_file)
    data_meta = sp.load_npz(f"/home/aiscuser/scratch1/datasets/{input_args.dataset}/XC/wiki-entity_ngame_tst_X_Y.npz")
    lbl_meta = sp.load_npz(f"/home/aiscuser/scratch1/datasets/{input_args.dataset}/XC/wiki-entity_ngame_lbl_X_Y.npz")
    meta = block.test.dset.meta['ent_meta']

    meta_dset = SMetaXCDataset(prefix='ent', data_meta=data_meta, lbl_meta=lbl_meta, meta_info=meta_info,
            n_data_meta_samples=meta.n_data_meta_samples, n_lbl_meta_samples=meta.n_lbl_meta_samples,
            meta_info_keys=meta.meta_info_keys, n_sdata_meta_samples=meta.n_sdata_meta_samples, 
            n_slbl_meta_samples=meta.n_slbl_meta_samples, meta_oversample=meta.meta_oversample, 
            use_meta_distribution=meta.use_meta_distribution)
    test_dset = SXCDataset(block.test.dset.data, **{'ent_meta': meta_dset})
    # wiki entity

    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=800,
        per_device_eval_batch_size=800,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        eval_strategy="steps",
        eval_steps=50,
        save_steps=50,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        adam_epsilon=1e-6,
        warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-5,
        representation_search_type='BRUTEFORCE',
    
        output_representation_attribute='data_fused_repr',
        clustering_representation_attribute='data_fused_repr',
        representation_attribute='data_fused_repr',
        label_representation_attribute='data_repr',
        metadata_representation_attribute='data_repr',
        data_augmentation_attribute='data_repr',
    
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        use_data_metadata_for_clustering=True,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,

        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
    
        use_distributional_representation=False,
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,
    
        label_names=[f'{meta_name}2data_idx', f'{meta_name}2data_data2ptr'],
                     
        prune_metadata=False,
        num_metadata_prune_warmup_epochs=10,
        num_metadata_prune_epochs=5,
        metadata_prune_batch_size=2048,
        prune_metadata_names=[f'{meta_name}_meta'],
        use_data_metadata_for_pruning=True,
    
        predict_with_augmentation=False,
        use_augmentation_index_representation=True,
    
        data_aug_meta_name=meta_name,
        augmentation_num_beams=None,
        data_aug_prefix=meta_name,
        use_label_metadata=False,
    
        data_meta_batch_size=2048,
        augment_metadata=False,
        num_metadata_augment_warmup_epochs=10,
        num_metadata_augment_epochs=5,
    
        use_cpu_for_searching=True,
        use_cpu_for_clustering=True,
    )

    def model_fn(mname):
        model = OAK003.from_pretrained(mname, batch_size=bsz, num_batch_labels=5000,
                margin=0.3, num_negatives=10, tau=0.1, apply_softmax=True,
                                           
                data_aug_meta_prefix=f'{meta_name}2data', lbl2data_aug_meta_prefix=None,
                data_pred_meta_prefix=None, lbl2data_pred_meta_prefix=None,
                
                num_metadata=block.test.dset.meta[f'{meta_name}_meta'].n_meta, resize_length=5000,
                
                calib_margin=0.05, calib_num_negatives=10, calib_tau=0.1, calib_apply_softmax=False,
                calib_loss_weight=0.1, use_calib_loss=True,
                
                use_query_loss=True,
                
                meta_loss_weight=0.0,
                fusion_loss_weight=0.0, use_fusion_loss=False,
                
                use_encoder_parallel=True)
        return model
    
    def init_fn(model): 
        model.init_retrieval_head()
        # model.init_cross_head()
        model.init_meta_embeddings()

        meta_embeddings = torch.load(meta_embed_init_file)
        model.encoder.set_pretrained_meta_embeddings(meta_embeddings)
        model.encoder.freeze_pretrained_meta_embeddings()

    metric = PrecReclMrr(block.n_lbl, block.test.data_lbl_filterer, prop=None if block.train is None else block.train.dset.data.data_lbl,
                         pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200], mk=[5, 10, 20])

    bsz = max(args.per_device_train_batch_size, args.per_device_eval_batch_size)*torch.cuda.device_count()

    model = load_model(args.output_dir, model_fn, {"mname": mname}, init_fn, do_inference=do_inference, 
            use_pretrained=input_args.use_pretrained)

    learn = XCLearner(
        model=model,
        args=args,
        train_dataset=None if block.train is None else block.train.dset,
        eval_dataset=test_dset,
        data_collator=block.collator,
        compute_metrics=metric,
    )

    main(learn, input_args, n_lbl=block.n_lbl)
    
