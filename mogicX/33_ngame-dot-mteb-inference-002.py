# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/33_ngame-mteb-inference.ipynb.

# %% auto 0
__all__ = ['parse_args']

# %% ../nbs/33_ngame-mteb-inference.ipynb 3
import os
os.environ['HIP_VISIBLE_DEVICES'] = '8,9,10,11,12,13'
os.environ["NCCL_DEBUG"] = "NONE"
os.environ["ROCM_DISABLE_WARNINGS"] = "1"
os.environ["MIOPEN_LOG_LEVEL"] = "0"

import torch,json, torch.multiprocessing as mp, joblib, numpy as np, scipy.sparse as sp, argparse

from transformers import DistilBertConfig

from xcai.sdata import *
from xcai.core import Info
from xcai.basics import *
from xcai.models.PPP0XX import DBT009,DBT011,DBT009Encoder,Pooling

from fastcore.meta import *
from fastcore.utils import *

from typing import Optional
from xcai.core import store_attr
from xcai.representation.search import BruteForceSearch

# %% ../nbs/33_ngame-mteb-inference.ipynb 5
os.environ['WANDB_PROJECT'] = 'mogicX_00-msmarco'

@patch
def forward(
    self:DBT009Encoder, 
    input_ids:Optional[torch.Tensor]=None, 
    attention_mask:Optional[torch.Tensor]=None,
    **kwargs
):
    o = self.distilbert(
        input_ids=input_ids,
        attention_mask=attention_mask,
        **kwargs
    )
    return o, Pooling.mean_pooling(o[0], attention_mask)

@patch
def proc(self:BruteForceSearch, inputs:Optional[torch.Tensor], n_bm:Optional[int]=None):
    store_attr('n_bm', is_none=False)
    index, info = self.index
    inputs, n_bm = inputs, min(index.shape[0], self.n_bm)
    inputs = inputs.to(index.device)
    
    sc, idx = torch.topk(inputs@index.T, n_bm, dim=1, largest=True)
    if info is None: info = idx
    else: info = info.unsqueeze(0).expand((idx.shape[0],-1)).gather(1, idx)
        
    info, sc, ptr = info.reshape(-1), sc.reshape(-1), torch.full((inputs.shape[0],), n_bm, device=inputs.device)
    return {'info2data_idx':info, 'info2data_score':sc, 'info2data_data2ptr':ptr}


# %% ../nbs/33_ngame-mteb-inference.ipynb 7
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--build_block', action='store_true')
    parser.add_argument('--use_pretrained', action='store_true')
    
    parser.add_argument('--do_train_inference', action='store_true')
    parser.add_argument('--do_test_inference', action='store_true')
    
    parser.add_argument('--save_train_prediction', action='store_true')
    parser.add_argument('--save_test_prediction', action='store_true')
    parser.add_argument('--save_label_prediction', action='store_true')
    
    parser.add_argument('--save_representation', action='store_true')
    
    parser.add_argument('--use_sxc_sampler', action='store_true')
    parser.add_argument('--only_test', action='store_true')

    parser.add_argument('--pickle_dir', type=str, required=True)
    
    parser.add_argument('--prediction_suffix', type=str, default='')
    
    parser.add_argument('--dataset', type=str, required=True)
    return parser.parse_args()
    

# %% ../nbs/33_ngame-mteb-inference.ipynb 32
if __name__ == '__main__':
    output_dir = '/home/aiscuser/scratch1/outputs/mogicX/31_ngame-for-msmarco-from-scratch-001'
    
    input_args = parse_args()

    config_file = f'/home/aiscuser/scratch1/datasets/{input_args.dataset}/XC/configs/data.json'
    config_key = 'data'
    
    mname = 'sentence-transformers/msmarco-distilbert-dot-v5'

    pkl_file = f'{input_args.pickle_dir}/mogicX/{input_args.dataset}_data_distilbert-base-uncased'
    pkl_file = f'{pkl_file}_sxc' if input_args.use_sxc_sampler else f'{pkl_file}_xcs'
    if input_args.only_test: pkl_file = f'{pkl_file}_only-test'
    pkl_file = f'{pkl_file}.joblib'

    do_inference = input_args.do_train_inference or input_args.do_test_inference or input_args.save_train_prediction or input_args.save_test_prediction or input_args.save_representation

    os.makedirs(os.path.dirname(pkl_file), exist_ok=True)
    block = build_block(pkl_file, config_file, input_args.use_sxc_sampler, config_key, do_build=input_args.build_block, only_test=input_args.only_test)

    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=800,
        per_device_eval_batch_size=800,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        eval_strategy="steps",
        eval_steps=5000,
        save_steps=5000,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        representation_search_type='BRUTEFORCE',
        adam_epsilon=1e-6,
        warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-4,
    
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,
    
        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
    
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,

        use_cpu_for_searching=True,
        use_cpu_for_clustering=True,
    )

    def model_fn(mname, bsz):
        model = DBT009.from_pretrained(mname, bsz=bsz, tn_targ=5000, margin=0.3, tau=0.1, n_negatives=10, 
                                       apply_softmax=True, use_encoder_parallel=True)
        return model
    
    def init_fn(model): 
        model.init_dr_head()

    metric = PrecReclMrr(block.n_lbl, block.test.data_lbl_filterer, prop=None if block.train is None else block.train.dset.data.data_lbl, 
            pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200], mk=[5, 10, 20])

    bsz = max(args.per_device_train_batch_size, args.per_device_eval_batch_size)*torch.cuda.device_count()

    model = load_model(args.output_dir, model_fn, {"mname": mname, "bsz": bsz}, init_fn, do_inference=do_inference, 
            use_pretrained=input_args.use_pretrained)
    
    learn = XCLearner(
        model=model,
        args=args,
        train_dataset=None if block.train is None else block.train.dset,
        eval_dataset=block.test.dset,
        data_collator=block.collator,
        compute_metrics=metric,
    )
    
    main(learn, input_args, n_lbl=block.test.dset.n_lbl)
    
