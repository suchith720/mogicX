# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_msmarco-linker.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/01_msmarco-linker.ipynb 3
import os
os.environ['HIP_VISIBLE_DEVICES'] = '4,5'

import torch,json, torch.multiprocessing as mp, joblib, numpy as np, scipy.sparse as sp

from xcai.basics import *
from xcai.models.PPP0XX import DBT009,DBT011

# %% ../nbs/01_msmarco-linker.ipynb 5
os.environ['WANDB_PROJECT'] = 'mogicX_00-msmarco'

from xcai.models.PPP0XX import DBT009Encoder

from typing import Optional
from fastcore.meta import *
from fastcore.utils import *

@patch
def forward(
    self:DBT009Encoder, 
    input_ids:Optional[torch.Tensor]=None, 
    attention_mask:Optional[torch.Tensor]=None,
    **kwargs
):
    o = self.distilbert(
        input_ids=input_ids,
        attention_mask=attention_mask,
        **kwargs
    )
    return o, o[0] 


# %% ../nbs/01_msmarco-linker.ipynb 20
if __name__ == '__main__':
    config_file = '/data/datasets/msmarco/XC/configs/data.json'
    config_key = 'data'
    
    mname = 'distilbert-base-uncased'

    input_args = parse_args()

    input_args.only_test, input_args.use_pretrained = True, True
    pkl_file = get_pkl_file(input_args.pickle_dir, 'msmarco_data_distilbert-base-uncased', input_args.use_sxc_sampler, 
                            input_args.exact, input_args.only_test)

    do_inference = input_args.do_train_inference or input_args.do_test_inference or input_args.save_train_prediction or input_args.save_test_prediction or input_args.save_representation

    os.makedirs(os.path.dirname(pkl_file), exist_ok=True)
    block = build_block(pkl_file, config_file, input_args.use_sxc_sampler, config_key, do_build=input_args.build_block)

    args = XCLearningArguments(
        output_dir='.',
        logging_first_step=True,
        per_device_train_batch_size=800,
        per_device_eval_batch_size=800,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        eval_strategy="steps",
        eval_steps=5000,
        save_steps=5000,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        representation_search_type='BRUTEFORCE',
        adam_epsilon=1e-6,                                                                                                                                          warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-6,
    
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,
    
        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
    
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,
    )

    def model_fn(mname):
        model = DBT009.from_pretrained(mname, margin=0.3, tau=0.1, n_negatives=10, apply_softmax=True, use_encoder_parallel=True)
        return model
    
    def init_fn(model): 
        model.init_dr_head()

    model = load_model(args.output_dir, model_fn, {"mname": mname}, init_fn, do_inference=do_inference, use_pretrained=input_args.use_pretrained)
    
    learn = XCLearner(
        model=model,
        args=args,
        eval_dataset=block.test.dset,
        data_collator=block.collator,
    )
    
    lbl_rep = learn._get_lbl_representation(block.test.dset, to_cpu=True)

    save_file = '/home/aiscuser/scratch1/datasets/lbl_repr.pth'
    torch.save(lbl_rep, save_file)
    
